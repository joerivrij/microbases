version: "2.1"
services:

##################################
######### MICROSERVICES #########
##################################

  documentbase:
    build: ../document/
    environment:
      - GOENV=docker
      - JAEGER_AGENT_HOST=jaeger-agent
      - JAEGER_AGENT_PORT=6831
    ports:
    - 3210:3210


###################################
############ DATABASES ############
###################################

  redis:
    image: redis
    ports: #6379
    - 6379:6379

  mongo:
    image: mongo:3.6
    ports:
    - 27017:27017

  postgres:
    image: postgres:9.6
    ports:
    - 5435:5432

  neo4j:
    image: neo4j:3.0
    ports:
      - 7474:7474
      - 7687:7687

###################################
############## KAFKA ##############
###################################
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
    - "2181:2181"
  kafka:
    build: .
    ports:
    - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock

##################################
######### JAEGER ELASTIC #########
##################################
  els:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.0.0
    restart: always
    hostname: els
    environment:
    - bootstrap.memory_lock=true
    - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
    - "9200:9200"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 1g
    volumes:
    - esdata1:/usr/share/elasticsearch/data
    - eslog:/usr/share/elasticsearch/logs
    - ./config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml

  kibana:
    image: docker.elastic.co/kibana/kibana:6.0.0
    ports:
    - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://els:9200
    depends_on:
    - els

  jaeger-collector:
    image: jaegertracing/jaeger-collector:latest
    environment:
    - SPAN_STORAGE_TYPE=elasticsearch
    ports:
    - "14267:14267"
    - "14268:14268"
    - "9411:9411"
    depends_on:
    - els
    hostname: jaeger-collector
    restart: unless-stopped
    command: ["--span-storage.type=elasticsearch", "--es.server-urls=http://els:9200"]

  jaeger-agent:
    image: jaegertracing/jaeger-agent:latest
    environment:
    - SPAN_STORAGE_TYPE=elasticsearch
    ports:
    - "5775:5775/udp"
    - "5778:5778"
    - "6831:6831/udp"
    - "6832:6832/udp"
    depends_on:
    - els
    - jaeger-collector
    restart: unless-stopped
    hostname: jaeger-agent
    command: ["--collector.host-port=jaeger-collector:14267"]

  jaeger-query:
    image: jaegertracing/jaeger-query:latest
    ports:
    - 16686:16686
    environment:
    - SPAN_STORAGE_TYPE=elasticsearch
    depends_on:
    - els
    - jaeger-collector
    restart: unless-stopped
    hostname: jaeger-query
    command: ["--span-storage.type=elasticsearch", "--es.server-urls=http://els:9200", "--es.sniffer=false"]

  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:9.6
    restart: always
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
    ports:
    - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 5s
      timeout: 5s
      retries: 5

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong:latest
    command: "kong migrations up"
    restart: on-failure
    environment:
      KONG_PG_HOST: kong-database
    links:
    - kong-database
    depends_on:
    - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong:latest
    restart: always
    environment:
      KONG_PG_HOST: kong-database
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    depends_on:
    - kong-migration
    - kong-database
    healthcheck:
      test: ["CMD", "curl", "-f", "http://kong:8001"]
      interval: 5s
      timeout: 2s
      retries: 15
    ports:
    - "8001:8001"
    - "8000:8000"

  #######################################
  # Konga database prepare
  #######################################
  konga-prepare:
    image: pantsel/konga:next
    command: "-c prepare -a postgres -u postgresql://kong@kong-database:5432/konga_db"
    restart: on-failure
    links:
    - kong-database
    depends_on:
    - kong-database

  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    image: pantsel/konga:next
    restart: always
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      TOKEN_SECRET: km1GUr4RkcQD7DewhJPNXrCuZwcKmqjb
      DB_DATABASE: konga_db
      NODE_ENV: production
    depends_on:
    - kong-database
    ports:
    - "1337:1337"

  ###################################
  ############# SWAGGER #############
  ###################################
  mainswagger:
    build:
      context: ./swagger
      dockerfile: Dockerfile
    ports:
    - 8080:8080


volumes:
  esdata1:
    driver: local
  eslog:
    driver: local
